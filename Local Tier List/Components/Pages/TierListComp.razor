@page "/tier"
@using Microsoft.Extensions.Logging
@inject ILogger<TierListComp> Logger
<link href="css/charactercolor.css" rel="stylesheet" />

<div>
	@if (selecitem != null)
	{
		<div class="maiedal">
			<div class="d-flex col-8 rounded darken-95 flex-column mx-auto my-auto">
				<div class="d-flex p-4 text-end justify-content-end">
					<a class="clickable" @onclick="Exit">✖</a>
				</div>
				<img class="text-center d-flex mx-auto my-2" src="@selecitem.img" style="max-height: 400px; max-width: 400px"/>
				<input type="text" class="spinput rounded flex-fill text-light p-2" @bind="@selecitem.name" placeholder="Item Name">
				<input type="text" class="spinput rounded flex-fill text-light p-2" @bind="@selecitem.img" placeholder="Image Link">
				<button class="mx-2 text-danger" @onclick="YouSure">Remove</button>
			</div>
		</div>
		@if (yousure)
		{
			<div class="maiedal d-flex flex-column text-center justify-content-center">
				<div class="p-2 darken-95 d-flex rounded text-center flex-column justify-content-center mx-auto text-light col-6">
					<p> Are you sure you want to permanently remove this item? </p>
					<div class="d-flex flex-row flex-wrap mx-auto">
						<button class="mx-2 text-light" @onclick="YouSure">No</button>
						<button class="mx-2 text-danger" @onclick="Delete">Yes, remove it</button>
					</div>
				</div>
			</div>
		}
	}
	@if (selectier != null)
	{
		<div class="maiedal">
			<div class="p-2 d-flex col-8 rounded darken-95 flex-column mx-auto my-auto">
				<div class="d-flex p-4 text-end justify-content-end">
					<a class="clickable" @onclick="Exit">✖</a>
				</div>
				<div class="d-flex flex-column text-center justify-content-center mx-auto col-sm-1 py-1 py-sm-1 py-md-auto">
					<input type="text" value="@selectier.name" class="rounded fs-2 py-md-auto py-1 m-0 text-center flex-fill col-12 text-wrap text-light" @onchange="(e) => ChangeTierName(e.Value?.ToString(), selectier.ogname)" placeholder="Tier Title" style="background-color: @selectier.color">
				</div>
				<MudColorPicker Label="Tier Color" @bind-Text="selectier.color" Style="@($"color: {selectier.color};")" Placeholder="Select Color" />
				<button class="mx-2 text-danger" @onclick="YouSure">Remove</button>
			</div>
		</div>
		@if (yousure)
		{
			<div class="maiedal d-flex flex-column text-center justify-content-center">
				<div class="p-2 darken-95 d-flex rounded text-center flex-column justify-content-center mx-auto text-light col-6">
					<h5> Are you sure you want to permanently remove this tier? All items will be deleted with it!</h5>
					<div class="d-flex flex-row flex-wrap mx-auto">
						<button class="mx-2 text-light" @onclick="YouSure">No</button>
						<button class="mx-2 text-danger" @onclick="DeleteTier">Yes, remove it and all items within</button>
					</div>
				</div>
			</div>
		}
	}
	<div class="form-check">
		<input class="form-check-input" type="checkbox" value="" id="flexCheckDefault" @onchange="() => Toggle(ref showcase)">
		<label class="form-check-label" for="flexCheckDefault">
			Showcase Mode
		</label>
	</div>
	<div class="form-check">
		<input class="form-check-input" type="checkbox" value="" id="flexCheckDefault" @onchange="() => Toggle(ref minimal)">
		<label class="form-check-label" for="flexCheckDefault">
			Minimal Mode
		</label>
	</div>
	<div class="row col-12 d-flex darken-50 flex-column text-light m-2">
		<div class="d-flex flex-wrap flex-fill flex-row">
			<input type="text" class="spinput rounded col-4 flex-fill mx-2 text-light p-2" @bind="@selected.name" placeholder="Tierlist Name">
			<MudTextField @bind-Value="filter" Placeholder="Search" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mx-2 text-light"></MudTextField>
		</div>
		@foreach (var pair in selected.list)
		{
			<div class="p-0 m-0 d-flex darken-25 flex-column flex-sm-row col-12">
				<a class="d-flex clickable flex-column text-center justify-content-center col-sm-1 py-1 py-sm-1 py-md-auto me-1" @onmousedown="(e) => SelectTier(e, pair.Key)" style="background-color: @pair.Value.color">
					<input type="text" value="@pair.Value.name" class="tierput rounded d-flex fs-2 py-md-auto py-1 m-0 flex-fill col-12 text-wrap text-light" @onchange="(e) => ChangeTierName(e.Value?.ToString(), pair.Key)" placeholder="Tier Title">
				</a>
				<a class="d-flex flex-fill col-12 text-light" @ondragover="() => OverTier(pair.Key)" @ondragleave="OuttaTier">
					<div class="d-flex text-start flex-wrap col-12" style="border-top: solid; border-bottom: solid; border-color: @pair.Value.color">
						@for (int local = 0; local < pair.Value.items.Count; local++)
						{
							int i = local;
							@if (InFilter(pair.Value.items[i].name))
							{
								@if (showcase)
								{
									<MudTooltip class="col-2" Color="Color.Transparent">
										<ChildContent>
											<TierItemComp item="@pair.Value.items[i]" id="@i" isminimal="@minimal" OnItemSelect="Select" OnItemDrag="StartDrag" OnItemDragStop="StopDrag" OnItemOver="OverHere" OnItemOut="OuttaHere"></TierItemComp>
										</ChildContent>
										<TooltipContent>
											<div class="text-light darken-95 rounded p-3 m-0">
												@pair.Value.items[i].name
											</div>
										</TooltipContent>
									</MudTooltip>
								}
								else
								{
									<TierItemComp item="@pair.Value.items[i]" id="@i" isminimal="@minimal" OnItemSelect="Select" OnItemDrag="StartDrag" OnItemDragStop="StopDrag" OnItemOver="OverHere" OnItemOut="OuttaHere"></TierItemComp>
								}
							}
						}
						@if (!showcase)
						{
							if (minimal)
							{
								<h5 class="clickable p-0 m-0 justify-content-center rounded m-1 d-flex template tieritemsmall" @onclick="() => Add(pair.Key)"> New Item </h5>
							}
							else
							{
								<h5 class="clickable p-0 m-0 justify-content-center py-auto rounded my-auto d-flex template tieritem" @onclick="() => Add(pair.Key)"> New Item </h5>
							}
						}
					</div>
				</a>
			</div>
		}
		<div class="d-flex darken-25 col-12 flex-row m-0 p-0">
			@if (!showcase)
			{
				<a class="clickable col-12 p-0 m-0" @onclick="NewTier">
					<div class="d-block tieritem py-auto p-0 m-0 text-center template col-1 me-1 py-auto bg-darken-25">
						<h2>New Tier</h2>
					</div>
				</a>
				<div class="d-flex col-11"></div>
			}
		</div>
	</div>
</div>


@code
{
	[CascadingParameter]
	TierList selected { get; set; }

	Tier? selectier;

	TierItem? selecitem;
	string selecitemtier = "";

	TierLister tl;

	bool yousure;
	bool showcase = false;
	bool minimal = false;
	string filter = "";

	string dragtier = ""; // which tier mouse is over
	int dragover; // which item mouse is over
	string draggedtier = ""; // which tier dragged item was from
	int dragitem; // index of dragged item

	protected override async Task OnInitializedAsync()
	{
		tl = await itier.Start();
	}

	void Toggle(ref bool thing)
	{
		thing = !thing;
	}

	bool InFilter(string name)
	{
		if (filter == "")
		{
			return true;
		}
		string[] filters = filter.Split("+");
		foreach (string f in filters)
		{
			if (name.Contains(f, StringComparison.OrdinalIgnoreCase))
			{
				return true;
			}
		}
		return false;
	}

	void Select(TierItem l)
	{
		selecitem = l;
		selecitemtier = l.parent.ogname;
		selectier = null;
	}

	void Select(TierItem i, string key)
	{
		selecitem = i;
		selecitemtier = key;
		selectier = null;
	}

	void SelectTier(MouseEventArgs e, string tier)
	{
		Logger.LogInformation("Clicked tier " + tier);
		Logger.LogInformation(e.Button.ToString());
		if (e.Button == 2)
		{
			Logger.LogInformation("Registered tier " + tier);
			selectier = selected.list[tier];
			selecitem = null;
			selecitemtier = null;
		}
	}

	void Exit()
	{
		selecitem = null;
		selectier = null;
		selecitemtier = null;
		tl.SaveAll();
	}

	void Add(string key)
	{
		TierItem temp = new TierItem("NEW ITEM,", selected.list[key]);
		selected.list[key].Add(temp);
		selecitem = temp;
		tl.SaveAll();
	}

	void NewTier()
	{
		selected.list.Add("New Tier", new Tier("New Tier", "#EAD21F"));
		tl.SaveAll();
	}

	void ChangeTierName(string neww, string old)
	{
		Tier temp = selected.list[old];
		selected.list.Remove(old);

		while (true)
		{
			try
			{
				selected.list.Add(neww, temp);
				break;
			}
			catch
			{
				neww += " (1)";
			}
		}
		temp.name = neww;
		temp.ogname = neww;
		temp = null;
		tl.SaveAll();
	}

	void YouSure()
	{
		yousure = !yousure;
	}

	void Delete()
	{
		selected.list[selecitemtier].items.Remove(selecitem);
		selecitem = null;
		selecitemtier = "";
		YouSure();
		tl.SaveAll();
	}

	void DeleteTier()
	{
		selected.list.Remove(selectier.ogname);
		selectier = null;
		YouSure();
		tl.SaveAll();
	}

	void StartDrag(TierItem s) // Characacter Draggin'
	{
		//Logger.LogInformation($"Started drag with {selected.list[key].items[chara].name} from tier {key}! {e.Button}");
		draggedtier = s.parent.ogname;
		dragitem = selected.list[draggedtier].items.IndexOf(s);
	}

	void StartDrag(MouseEventArgs e, int chara, string key) // Characacter Draggin'
	{
		Logger.LogInformation($"Started drag with {selected.list[key].items[chara].name} from tier {key}! {e.Button}");
		draggedtier = key;
		dragitem = chara;
	}

	void StopDrag()
	{
		if (dragover >= 0)
		{
			Logger.LogInformation($"{dragover} {dragitem}");
			if (draggedtier != "" && dragtier != "")
			{
				try
				{
					if (selected.list[dragtier].items[dragover] != selected.list[draggedtier].items[dragitem])
					{
						Logger.LogInformation($"Switcheroo!");
						TierItem temp = selected.list[draggedtier].items[dragitem];
						selected.list[draggedtier].items.RemoveAt(dragitem);
						selected.list[dragtier].items.Insert(dragover, temp);
						temp = null;
						tl.SaveAll();
					}
				}
				catch
				{
					Logger.LogInformation($"Switcheroo!");
					TierItem temp = selected.list[draggedtier].items[dragitem];
					selected.list[draggedtier].items.RemoveAt(dragitem);
					selected.list[dragtier].items.Add(temp);
					temp = null;
				}
				dragover = -1;
				dragitem = -1;
			}
		}
		else
		{
			Logger.LogInformation($"Stopped drag!");
			dragitem = -1;
		}
		StateHasChanged();

	}

	void OverTier(string tier)
	{
		Logger.LogInformation($"Mouse over {tier} tier!");
		dragtier = tier;
		StateHasChanged();
	}

	void OuttaTier(MouseEventArgs e)
	{
		Logger.LogInformation($"Mouse out (tier)!");
		dragtier = "";
		StateHasChanged();
	}

	void OverHere(int pos)
	{
		Logger.LogInformation($"Mouse over some item!");
		dragover = pos;
		StateHasChanged();
	}

	void OuttaHere()
	{
		Logger.LogInformation($"Mouse out (item)!");
		dragover = -1;
		StateHasChanged();
	}
	// End Characacter Draggin'
}